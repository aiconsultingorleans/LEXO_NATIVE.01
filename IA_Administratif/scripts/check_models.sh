#!/bin/bash

# üîç Script de v√©rification des mod√®les ML pour LEXO v1
# V√©rifie que tous les mod√®les sont disponibles avant d√©marrage

set -e

# Couleurs pour les logs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log() {
    echo -e "${BLUE}[CHECK]${NC} $1"
}

success() {
    echo -e "${GREEN}[‚úÖ]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[‚ö†Ô∏è]${NC} $1"
}

error() {
    echo -e "${RED}[‚ùå]${NC} $1"
}

# R√©pertoire de base
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(dirname "$SCRIPT_DIR")"
ML_MODELS_DIR="$PROJECT_DIR/ml_models"

log "V√©rification des mod√®les ML pour LEXO v1"
log "R√©pertoire projet: $PROJECT_DIR"

# V√©rifier la structure des r√©pertoires
log "üìÅ V√©rification de la structure des r√©pertoires..."

REQUIRED_DIRS=(
    "$ML_MODELS_DIR"
    "$ML_MODELS_DIR/transformers"
    "$ML_MODELS_DIR/spacy"
    "$ML_MODELS_DIR/mistral_7b_mlx"
)

DIRS_OK=true
for dir in "${REQUIRED_DIRS[@]}"; do
    if [ -d "$dir" ]; then
        success "R√©pertoire trouv√©: $(basename "$dir")"
    else
        error "R√©pertoire manquant: $dir"
        DIRS_OK=false
    fi
done

if [ "$DIRS_OK" = false ]; then
    warning "Cr√©ation des r√©pertoires manquants..."
    mkdir -p "${REQUIRED_DIRS[@]}"
fi

# V√©rifier les mod√®les HuggingFace
log "ü§ó V√©rification du cache HuggingFace..."

HF_CACHE="$HOME/.cache/huggingface/hub"
if [ -d "$HF_CACHE" ]; then
    # Compter les mod√®les dans le cache
    MODEL_COUNT=$(find "$HF_CACHE" -name "models--*" -type d | wc -l)
    if [ "$MODEL_COUNT" -gt 0 ]; then
        success "Cache HuggingFace: $MODEL_COUNT mod√®les trouv√©s"
        
        # V√©rifier les mod√®les sp√©cifiques
        TROCR_FOUND=false
        EMBEDDINGS_FOUND=false
        MISTRAL_FOUND=false
        
        if [ -d "$HF_CACHE/models--microsoft--trocr-base-printed" ]; then
            success "TrOCR: microsoft/trocr-base-printed ‚úÖ"
            TROCR_FOUND=true
        else
            error "TrOCR: microsoft/trocr-base-printed ‚ùå"
        fi
        
        if [ -d "$HF_CACHE/models--sentence-transformers--paraphrase-multilingual-MiniLM-L12-v2" ]; then
            success "Embeddings: sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2 ‚úÖ"
            EMBEDDINGS_FOUND=true
        else
            error "Embeddings: sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2 ‚ùå"
        fi
        
        if [ -d "$HF_CACHE/models--mlx-community--Mistral-7B-Instruct-v0.3-4bit" ]; then
            success "Mistral MLX: mlx-community/Mistral-7B-Instruct-v0.3-4bit ‚úÖ"
            MISTRAL_FOUND=true
        else
            warning "Mistral MLX: mlx-community/Mistral-7B-Instruct-v0.3-4bit ‚ùå"
        fi
        
    else
        warning "Cache HuggingFace vide"
    fi
else
    error "Cache HuggingFace non trouv√©: $HF_CACHE"
fi

# V√©rifier spaCy
log "üî§ V√©rification des mod√®les spaCy..."

if command -v python3 &> /dev/null; then
    # Tester si spaCy et le mod√®le fran√ßais sont disponibles
    if python3 -c "import spacy; spacy.load('fr_core_news_sm'); print('spaCy fran√ßais OK')" 2>/dev/null; then
        success "spaCy: fr_core_news_sm ‚úÖ"
    else
        error "spaCy: fr_core_news_sm ‚ùå"
        warning "Pour installer: python -m spacy download fr_core_news_sm"
    fi
else
    error "Python3 non trouv√©"
fi

# V√©rifier MLX (Apple Silicon seulement)
log "üçé V√©rification de MLX (Apple Silicon)..."

if [[ $(uname -m) == "arm64" ]]; then
    if python3 -c "import mlx.core; print('MLX OK')" 2>/dev/null; then
        success "MLX: Disponible ‚úÖ"
    else
        warning "MLX: Non install√© ‚ùå"
        warning "Pour installer: pip install mlx-lm"
    fi
else
    warning "MLX: Non support√© sur cette architecture ($(uname -m))"
fi

# Calculer les tailles des caches
log "üìä Tailles des caches..."

calculate_size() {
    local dir="$1"
    if [ -d "$dir" ]; then
        local size=$(du -sh "$dir" 2>/dev/null | cut -f1)
        echo "$size"
    else
        echo "0B"
    fi
}

HF_SIZE=$(calculate_size "$HF_CACHE")
TRANSFORMERS_SIZE=$(calculate_size "$ML_MODELS_DIR/transformers")
SPACY_SIZE=$(calculate_size "$ML_MODELS_DIR/spacy")
MLX_SIZE=$(calculate_size "$ML_MODELS_DIR/mistral_7b_mlx")

log "Cache HuggingFace global: $HF_SIZE ($HF_CACHE)"
log "Cache Transformers local: $TRANSFORMERS_SIZE ($ML_MODELS_DIR/transformers)"
log "Cache spaCy local: $SPACY_SIZE ($ML_MODELS_DIR/spacy)"
log "Cache MLX local: $MLX_SIZE ($ML_MODELS_DIR/mistral_7b_mlx)"

# Recommandations
log "üí° Recommandations..."

if [ "$TROCR_FOUND" = false ] || [ "$EMBEDDINGS_FOUND" = false ]; then
    warning "Mod√®les manquants d√©tect√©s"
    warning "Ex√©cutez: python3 scripts/download_models.py"
fi

if [ ! -s "$ML_MODELS_DIR/transformers" ]; then
    warning "Cache local vide - Les mod√®les seront t√©l√©charg√©s au premier d√©marrage"
    warning "Pour pr√©-t√©l√©charger: python3 scripts/download_models.py"
fi

log "‚úÖ V√©rification termin√©e"

# Afficher le temps de d√©marrage estim√©
if [ "$TROCR_FOUND" = true ] && [ "$EMBEDDINGS_FOUND" = true ]; then
    success "üöÄ D√©marrage rapide: ~30 secondes"
else
    warning "‚è±Ô∏è  Premier d√©marrage: ~3-5 minutes (t√©l√©chargement)"
fi